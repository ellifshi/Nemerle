// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/09/Square/SquareGame.jack

/**
 * The SquareDance class implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beggining, the square is located at the top left corner.
 * Use the arrow keys to move the square.
 * Use 'z' & 'x' to decrement & increment the size.
 * Use 'q' to quit.
 */
class RectangleGame {

    // The square

    field Array arr;
    field Rectangle rect;
    
    // The square's movement direction
    field int direction; // 0=none,1=up,2=down,3=left,4=right
	field int arrDir;
	field bool toMark;
	
	
    /** Constructs a new Square Game. */
    constructor RectangleGame new() {
	
		//do Output.printString("start");
		let rect   = Rectangle.new(0,0, 31, 31);		
		let arr = Array.new(10);
		
		let arr[0] = Rectangle.new(0,224,31, 31);
		let arr[1] = Rectangle.new(50,224,31, 31);
		let arr[2] = Rectangle.new(100,224, 31, 31);
		let arr[3] = Rectangle.new(150,224,31, 31);
		let arr[4] = Rectangle.new(200,224,31, 31);
		let arr[5] = Rectangle.new(250,224,31, 31);
		let arr[6] = Rectangle.new(300,224, 31, 31);
		let arr[7] = Rectangle.new(350,224,31, 31);
		let arr[8] = Rectangle.new(400,224,31, 31);
		let arr[9] = Rectangle.new(450,224,31, 31);
		
		let arrDir = 0;
		return this;      
    }
	
	constructor RectangleGame afterDelte(){
		let arr = Array.new(10);
		let arr[0] = Rectangle.new(0,224,31, 31);
		let arr[1] = Rectangle.new(50,224,31, 31);
		let arr[2] = Rectangle.new(100,224, 31, 31);
		let arr[3] = Rectangle.new(150,224,31, 31);
		let arr[4] = Rectangle.new(200,224,31, 31);
		let arr[5] = Rectangle.new(250,224,31, 31);
		let arr[6] = Rectangle.new(300,224, 31, 31);
		let arr[7] = Rectangle.new(350,224,31, 31);
		let arr[8] = Rectangle.new(400,224,31, 31);
		let arr[9] = Rectangle.new(450,224,31, 31);
		return this;

	}

    /** Deallocates the object's memory. */
    method void dispose() {
        do rect.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that controls
     *  the square movement direction and size. */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                let exit = moveRectangle();
				do moveArray();
            }

            if (key = 81) {
                let exit = true;
            }
			if (key = 73) {
				let arrDir = 0;
			}
			if (key = 74) {
				let arrDir = 1;
			}
            if (key = 90) {
                do rect.decSize();
            }
            if (key = 88) {
                do rect.incSize();
            }
			if (key = 65) {
				do rect.decLength();
			}
			if (key = 83) {
				do rect.incLength();
			}
			if (key = 87) {
				do rect.decWidth();
			}
			if (key = 69) {
				do rect.incWidth();
			}
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }
			if (key = 72) {
				let toMark = ~toMark;
			}
			if (key = 70) {
				do colorScreen(true);
			}
			if (key = 71) {
				do colorScreen(false);
			}

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                let exit = moveRectangle();
				do moveArray();
            }
        }
            
        return;
	}

    /** Moves the square by 2 in the current direction. */
    method boolean moveRectangle() {
		var int dir;
		var int i;
		var boolean ret;
		var Rectangle temp;
		let dir = direction;
		
		let ret  = false;
		
		let i = 0;
		while (i < 10) {
	

		//do Output.printString(arr[i]);
			let temp = arr[i];
			if ((((temp.getX() < rect.getX()) & ((temp.getX() + temp.getL()) > rect.getX())) | ((temp.getX() = rect.getX()) & ((temp.getX() + temp.getL()) = rect.getX()))) & (((temp.getY() < rect.getY()) & ((temp.getY() + temp.getW()) > rect.getY())) | ((temp.getY() = rect.getY()) & ((temp.getY() + temp.getW()) = rect.getY())))){
				if (dir = 1 | dir = 3) {
					let direction = direction + 1;
				}
				if (dir = 2 | dir = 4) {
					let direction = direction - 1;
				}
				
				do temp.draw();
				
				let ret = true;
				
			}
			do Sys.wait(0);
			if ((((rect.getX() < temp.getX()) & ((rect.getX() + rect.getL()) > temp.getX())) | ((rect.getX() = temp.getX()) & ((rect.getX() + rect.getL()) = temp.getX()))) & (((temp.getY() < rect.getY()) & ((temp.getY() + temp.getW()) > rect.getY())) | ((temp.getY() = rect.getY()) & ((temp.getY() + temp.getW()) = rect.getY())))){
				if (dir = 1 | dir = 3) {
					let direction = direction + 1;
				}
				if (dir = 2 | dir = 4) {
					let direction = direction - 1;
				}
				
				do temp.draw();
				
				let ret = true;
			}
			do Sys.wait(0);
			if ((((temp.getX() < rect.getX()) & ((temp.getX() + temp.getL()) > rect.getX())) | ((temp.getX() = rect.getX()) & ((temp.getX() + temp.getL()) = rect.getX()))) & (((rect.getY() < temp.getY()) & ((rect.getY() + rect.getW()) > temp.getY())) | ((rect.getY() = temp.getY()) & ((rect.getY() + rect.getW()) = temp.getY())))){
				if (dir = 1 | dir = 3) {
					let direction = direction + 1;
				}
				if (dir = 2 | dir = 4) {
					let direction = direction - 1;
				}
				
				do temp.draw();
				
				let ret = true;
			}
			do Sys.wait(0);
			if ((((rect.getX() < temp.getX()) & ((rect.getX() + rect.getL()) > temp.getX())) | ((rect.getX() = temp.getX()) & ((rect.getX() + rect.getL()) = temp.getX()))) & (((rect.getY() < temp.getY()) & ((rect.getY() + rect.getW()) > temp.getY())) | ((rect.getY() = temp.getY()) & ((rect.getY() + rect.getW()) = temp.getY())))){
				if (dir = 1 | dir = 3) {
					let direction = direction + 1;
				}
				if (dir = 2 | dir = 4) {
					let direction = direction - 1;
				}
				
				do temp.draw();
				
				let ret = true;
			}
			do Sys.wait(0);
			let i = i + 1;

		}

		
        if (dir = 1) {
            let direction = rect.moveUp(toMark);
        }
        if (dir = 2) {
            let direction = rect.moveDown(toMark);
        }
        if (dir = 3) {
            let direction = rect.moveLeft(toMark);
        }
        if (dir = 4) {
            let direction = rect.moveRight(toMark);
        }

        if ((((dir = 1) | (dir = 2)) & toMark)) {
			do Sys.wait(5);
		}
		else {
			do Sys.wait(10); // Delays the next movement.
		}
        return ret;
    }
	
	method void moveArray() {
		var int i;
		var Rectangle temp;
		
		let i = 0;
		while (i < 10) {
			let temp = arr[i];
			
			if (arrDir = 1) {
				let arrDir = temp.moveUp(toMark);
			}
			if (arrDir = 2) {
				let arrDir = temp.moveDown(toMark);
			}
			let i = i + 1;
		}
		return;
	}
	
	method void colorScreen(bool mode) {
		var int i;
		var RectangleGame game;
		
		if (mode) {
			do Screen.setColor(false);
			//do Screen.drawRectangle(0, 0, 510, 254);
			//let game = RectangleGame.newd();
			do Screen.clearScreen();
		}
		if (~mode) {
			do Screen.setColor(true);
			let i = 0;
			while (i < 512) {
				do Screen.drawRectangle(i, 0, i, 254);
				let i = i + 2;
			}
		}
		
		return;
	}
}
