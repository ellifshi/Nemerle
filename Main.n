using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.IO.File;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;
using System.Net.Sockets;
using Nemerle.Imperative; // must to add

class Exe1
{
    public static mutable lableCounter = 0;

    public static add(fs:FileStream) : void
    {
        mutable writer =  StreamWriter(fs);
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("D=M");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("A=M");
        writer.WriteLine("D=D+A"); 
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("M=D");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M+1");

        writer.Close();
        fs.Close();
    }
    public static sub(fs:FileStream) : void
    {
        mutable writer =  StreamWriter(fs);
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("D=M");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("A=M");
        writer.WriteLine("D=D-A"); //TODO: not sure if d-a or a-d. should be checked
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("M=D");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M+1");

        writer.Close();
        fs.Close();
    }
    public static andd(fs:FileStream) : void
    {
        mutable writer =  StreamWriter(fs);   
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("D=M");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("A=M");
        writer.WriteLine("D=D&A"); 
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("M=D");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M+1");

        writer.Close();
        fs.Close();
    }
    public static or(fs:FileStream) : void
    {
        mutable writer =  StreamWriter(fs);
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("D=M");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("A=M");
        writer.WriteLine("D=D|A"); 
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("M=D");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M+1");

        writer.Close();
        fs.Close();
    }
    public static eq(fs:FileStream) : void
    {
        mutable fname = fs.Name;

        mutable writer =  StreamWriter(fs);

        //pop to D
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("D=M");

        //pop to A
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("A=M");
        writer.WriteLine("A=M");

        //if a == d jump
        writer.WriteLine("D=D-A");
        mutable lable1 = "EQ_"+fname+lableCounter;
        lableCounter++;
        writer.WriteLine("@"+lable1);
        writer.WriteLine("D;JEQ");

        //else  do d=1 and jump to the end
        writer.WriteLine("D=1");
        mutable lable2 = "END_"+fname+lableCounter;
        lableCounter++;
        writer.WriteLine("@"+lable2);
        writer.WriteLine("1;JMP");

        //if condition
        writer.WriteLine("("+lable1+")");
        writer.WriteLine("D=0");

        //end - push d
        writer.WriteLine("("+lable2+")");
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("M=D");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M+1");

        writer.Close();
        fs.Close();
    }
    public static gt(fs:FileStream) : void
    {
        mutable writer =  StreamWriter(fs);
        mutable fname = fs.Name;
        mutable lable1 = "Label_"+fname+lableCounter; //"D=A-D
        lableCounter++;
        mutable lable2 = "Label_" + fname+lableCounter;
        lableCounter++;
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("D=M");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("A=M");
        writer.WriteLine("D=A-D");
        writer.WriteLine("@"+lable1);
        writer.WriteLine("D ; JGT");
        writer.WriteLine("@"+lable2);
        writer.WriteLine("D=0 ; JEQ");
        writer.WriteLine("("+lable1+")");
        writer.WriteLine("D=-1");
        writer.WriteLine("("+lable2+")");
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("M=D");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M+1");  


        writer.Close();
        fs.Close();
    }
    public static lt(fs:FileStream) : void
    {
        mutable writer =  StreamWriter(fs);
        mutable fname = fs.Name;
        mutable lable1 = "Label_"+fname+lableCounter;
        lableCounter++;
        mutable lable2 = "Label_" + fname+lableCounter;
        lableCounter++;
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("D=M");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("A=M");
        writer.WriteLine("D=D-A");
        writer.WriteLine("@"+lable1);
        writer.WriteLine("D ; JGT");
        writer.WriteLine("@"+lable2);
        writer.WriteLine("D=0 ; JEQ");
        writer.WriteLine("("+lable1+")");
        writer.WriteLine("D=-1");
        writer.WriteLine("("+lable2+")");
        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("M=D");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M+1");

        writer.Close();
        fs.Close();
    }
    public static neg(fs:FileStream) : void
    {

        mutable writer =  StreamWriter(fs);

        writer.WriteLine("@SP");
        writer.WriteLine("A=M-1");
        writer.WriteLine("D=M");
        writer.WriteLine("M=-D");

        writer.Close();
        fs.Close();
    }
    public static not(fs:FileStream) : void
    {
        mutable writer =  StreamWriter(fs);   
        writer.WriteLine("@SP");
        writer.WriteLine("A=M-1");
        writer.WriteLine("D=M");
        writer.WriteLine("M=!D");

        writer.Close();
        fs.Close();
    }
    public static push(fs:FileStream, verible:string, number:string) : void
    {
        mutable writer =  StreamWriter(fs);
        writer.WriteLine("@" + number);
        writer.WriteLine("D=A");
        if (verible.Equals("constant"))
        {
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("M=M+1");
            writer.Close();
            fs.Close();
            return;
        }
        else
        {
            match(verible)
            {
                | "local" => writer.WriteLine("@LCL" + '\n' + "A=M+D" + '\n' + "D=M")
                | "argument" => writer.WriteLine("@ARG" + '\n' + "A=M+D" + '\n' + "D=M")
                | "this" => writer.WriteLine("@THIS" + '\n' + "A=M+D" + '\n' + "D=M")
                | "that" => writer.WriteLine("@THAT" + '\n' + "A=M+D" + '\n' + "D=M")
                | "static" => writer.WriteLine("@16" + '\n' + "A=M+D" + '\n' + "D=M")
                | "pointer" => writer.WriteLine("@3" + '\n' + "A=M+D" + '\n' + "D=M")
                | "temp" => writer.WriteLine("@5" + '\n' + "A=M+D" + '\n' + "D=M") 
                | _ => ();
            }
        }

        writer.WriteLine("@SP");
        writer.WriteLine("A=M");
        writer.WriteLine("M=D");
        writer.WriteLine("@SP");
        writer.WriteLine("M=M+1");

        writer.Close();
        fs.Close();
    }
    public static pop(fs:FileStream, verible:string, number:string) : void
    {
        mutable writer =  StreamWriter(fs);   

        writer.WriteLine("@SP");
        writer.WriteLine("M=M-1");
        if (verible.Equals("constant"))
        {
            writer.Close();
            fs.Close();
            return;
        }
        else
        {
            writer.WriteLine("@" + number);
            writer.WriteLine("D=A");
            match(verible)
            {
                | "local" => writer.WriteLine("@LCL" + '\n' + "D=M+D")
                | "argument" => writer.WriteLine("@ARG" + '\n' + "D=M+D")
                | "this" => writer.WriteLine("@THIS" + '\n' + "D=M+D")
                | "that" => writer.WriteLine("@THAT" + '\n' + "D=M+D")
                | "static" => writer.WriteLine("@16" + '\n' + "D=A+D")
                | "pointer" => writer.WriteLine("@3" + '\n' + "D=A+D")
                | "temp" => writer.WriteLine("@5" + '\n' + "D=A+D") 
                | _ => ();
            }
            writer.WriteLine("@R13");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("D=M");
            writer.WriteLine("@R13");
            writer.WriteLine("A=M");   
            writer.WriteLine("M=D"); 
        }

        writer.Close();
        fs.Close();
    }


    //SeesionData hendle all the line, by split the line 
    public static SeesionData(path : string, line : string) : void
    {
        mutable fs : FileStream;
        if (File.Exists(path))
        {
            fs = FileStream(path,FileMode.Append,FileAccess.Write);
        }
        else
        {
            fs =  FileStream(path, FileMode.Create,FileAccess.Write);
        }

        mutable words = line.Split(" ".ToArray(), StringSplitOptions.RemoveEmptyEntries);

        for(mutable i = 0; i < 1; i++)
        {
            mutable word = words[0];

            match(word)
            {
                | "add" => add(fs)
                | "sub" => sub(fs)
                | "and" => andd(fs)
                | "or" => or(fs)
                | "eq" => eq(fs)
                | "gt" => gt(fs)
                | "lt" => lt(fs)
                | "neg" => neg(fs)
                | "not" => not(fs)
                | "push" => push(fs, words[1], words[2])
                | "pop" => pop(fs, words[1], words[2]);
                | _ => ();
            }

        }
        fs.Close();
    }
    public static Main() : void
    {
        mutable contentsOfFile : string = ""; //for the contents of all matching file, (.vm)
        mutable path : string = @"C:\Users\Shneor Giladi\Desktop\Folder";//for the path of all matching file, (.vm)

        foreach (file in Directory.EnumerateFiles(path, "*.vm"))
        {
            contentsOfFile = File.ReadAllText(file); //the contents of file
            path = Path.GetFullPath(file);          //the path of file
            def lines = File.ReadLines(path).Where(line => !line.Contains("//") && !line.Equals("")).ToArray(); // we using in macro NEMERLE that print all line if it NOT commend or empty line

            path = Path.GetFullPath(file).Replace(".vm", ".asm");           //the path of file
            foreach (line in lines)
            {
                SeesionData(path, line); // any line that not contain commend, we can sen it to the switch to split the line
            } 
        }

    // _ = ReadLine();
    }
}