class
SquareGame
{
field
Square
square
;
field
int
direction
;
constructor
SquareGame
new
(
)
{
let
square
eq
Square
.
new
(
0
,
0
,
30
)
;
let
direction
eq
0
;
return
this
;
}
method
void
dispose
(
)
{
do
square
.
dispose
(
)
;
do
Memory
.
deAlloc
(
this
)
;
return
;
}
method
void
run
(
)
{
var
char
key
;
var
boolean
exit
;
let
exit
eq
false
;
while
(
~
exit
)
{
while
(
key
eq
0
)
{
let
key
eq
Keyboard
.
keyPressed
(
)
;
do
moveSquare
(
)
;
}
if
(
key
eq
81
)
{
let
exit
eq
true
;
}
if
(
key
eq
90
)
{
do
square
.
decSize
(
)
;
}
if
(
key
eq
88
)
{
do
square
.
incSize
(
)
;
}
if
(
key
eq
131
)
{
let
direction
eq
1
;
}
if
(
key
eq
133
)
{
let
direction
eq
2
;
}
if
(
key
eq
130
)
{
let
direction
eq
3
;
}
if
(
key
eq
132
)
{
let
direction
eq
4
;
}
while
(
~
(
key
eq
0
)
)
{
let
key
eq
Keyboard
.
keyPressed
(
)
;
do
moveSquare
(
)
;
}
}
return
;
}
method
void
moveSquare
(
)
{
if
(
direction
eq
1
)
{
do
square
.
moveUp
(
)
;
}
if
(
direction
eq
2
)
{
do
square
.
moveDown
(
)
;
}
if
(
direction
eq
3
)
{
do
square
.
moveLeft
(
)
;
}
if
(
direction
eq
4
)
{
do
square
.
moveRight
(
)
;
}
do
Sys
.
wait
(
5
)
;
return
;
}
}
