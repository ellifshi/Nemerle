using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.IO.File;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;
using System.Net.Sockets;
using Nemerle.Imperative;
using System.Collections.DictionaryEntry;
using Nemerle.Extensions;
using System.String;
using Nemerle;
using Nemerle.Utility.NString;


namespace Exe_5
{
    class JackTokenizer
    {
        public static opKeyWord : Set [string];
        public static KeyWords : Set [string];

        static this ()
        {
            def tab1 = array ["class", "constructor", "function", "method", "field", "static", "var", "int", "char", "boolean", "void", "true", "false", "null", "this", "let", "do", "if", "else", "while", "return",];
            KeyWords = Set(tab1);
            def tab2 = array ["+", "-", "*", "/", "|", "&amp;", "&lt;", "&gt;", "=", "(", ")", "}", "{", ";", ",", ".", "[", "]", "~"];
            opKeyWord = Set(tab2);       
        }
        
        //in the string, we have sevelrle of words, whith space. so we need to hendle in string diffrently.
        static public hendleWithString(line:string) : string
        {
            mutable start = line.IndexOf("\""); // what is the index of the first (") 

            mutable subLine = line.Substring(start + 1); //get the sub string AFTER the first (")

            mutable end = subLine.IndexOf("\"") + 1 + start; // get the index of the secund (")

            mutable temp1 = line.Substring(0, start); //get the subString from the beggining until the first (")

            mutable temp2 = line.Substring(start, end - start).Replace(" ", "@").Replace("\"",""); // get the subString from the first (") until the secound ("). and replace " " to "_".

            mutable temp3 = line.Substring(end).Replace("\"", "").Replace("\\", ""); //get the subString from the secnd (") to the end.

            mutable temp4 = temp1 + temp2 + temp3; //get the all line, but in the string we get instead of space (" ") the ("_").
            temp4;      //return the line
        }
        
        //in returnArray we change the lines from the jack files for any relevent char with space, delte some line withe commend, and returne to array.
        static public returnArray(lines:array[string]) : array[string]
        {
            mutable finalLine :string;
            mutable count = 0;
            // check if we got string at line 
            foreach(line in lines)
            {
                mutable lineWithFilter = line.Replace(",", " , ").Replace("(", " ( ").Replace(")", " ) ").Replace(".", " . ").Replace(";", " ;").Replace("{", " { ").Replace("}", " } ").Replace("\t", " ").Replace("\\","").Replace("[", " [ ").Replace("]", " ] ").Replace("  ", " ").Replace("\\**", "\\").Replace("*\\", "\\").Replace("~", " ~ ").Replace("&", " &amp; ").Replace("<", " &lt; ").Replace(">", " &gt; ");
                if(lineWithFilter.Contains("\"")) 
                { 
                    finalLine = hendleWithString(lineWithFilter);
                    lines[count] = finalLine;
                    count++;
                }
                else
                {
                    finalLine = lineWithFilter;
                    lines[count] = finalLine;
                    count++;
                }
            }
            count = 0;
            foreach(line in lines)
            {
                finalLine = line;
                while(finalLine.StartsWith(" "))
                {
                    finalLine = finalLine.Remove(0, 1); //delete some space in the start of the word
                    lines[count] = finalLine;
                }
                if(line.Contains("//")) // check if we got commend in the middle of line
                {
                    mutable end = line.IndexOf("//");
                    finalLine = finalLine.Substring(0, end); //we get line without commend
                    
                    while(finalLine.Contains("//"))
                    {
                        end = finalLine.IndexOf("//");
                        finalLine = finalLine.Substring(0, end); 
                    }
                    lines[count] = finalLine;
                    count++;
                    
                }
                else if(line.Contains("   *")) // check if we got commend in the middle of line
                {
                    lines[count] = "";
                    count++;       
                }
                else if(line.Contains("*")) // check if we got commend in the middle of line
                {
                    lines[count] = "";
                    count++;       
                }
                else
                {
                    lines[count] = finalLine;
                    count++;
                }
            }
            //now we delete all empty line
            count = 0;
            mutable newLines = List();
            
            foreach(line in lines)
            {
                if(line.Equals(""))//we don't need empty line.
                {
                    //count++;
                }
                else 
                {
                    newLines.Add(line);
                    //count++;
                }
            }
            newLines.ToArray();
        }

        static public sessionData(lines:array[string], pathTXMLFile:string, pathXMLFIle:string):void
        {
            //mutable newLines = List();
            mutable newLines = returnArray(lines);
           
            foreach (line in newLines)
            {
                mutable words = line.Split(" ".ToArray(), StringSplitOptions.RemoveEmptyEntries);    
                mutable fs : FileStream;
                foreach(word in words)
                {   
                    if (File.Exists(pathTXMLFile))
                    {
                        fs = FileStream(pathTXMLFile,FileMode.Append,FileAccess.Write);
                    }
                    else
                    {
                        fs =  FileStream(pathTXMLFile, FileMode.Create,FileAccess.Write);
                    }
                    def checkIfTheWordEqualToKeyWord = KeyWords.Contains(word); //bool
                    def checkIfTheWordEqualOPKeyWord = opKeyWord.Contains(word); // bool
                
                    mutable number : int; // check if char is a number
                
                    if(checkIfTheWordEqualToKeyWord) 
                    {
                        keyWord(word, fs); // if the word is keyword, so wo print the word
                    }
                    else if(checkIfTheWordEqualOPKeyWord)
                    {
                        symbol(word, fs); // if the word is opernd keyword, so wo print the word
                    }
                    else if (word.Contains("@"))
                    {
                        stringVal(word, fs);
                    }
                    else if(int.TryParse(word, out number))// check if char is a number
                    {
                        intVal(word, fs); // if the word is number, so wo print the word
                    }
                    else
                    {
                        identifier(word, fs); // if the word is identifier, so wo print the word
                    }
                }             
            }
            
          //mutable jef = fromTxmlToList(pathTXMLFile);
          //WriteLine(jef);
        }
        public static fromTxmlToList(pathTXMLFile:string):List[string]//sometime we more esiaer to hendle with list
        {       
            mutable allLinesText = List();
            allLinesText = File.ReadAllLines(pathTXMLFile).ToList();
            allLinesText;
        }
        public static printTokens(word:string, fs:FileStream):void //print token that we get to Txml file
        {
            mutable writer =  StreamWriter(fs);  

            writer.WriteLine(word);

            writer.Close();
            fs.Close();
        }

        public static keyWord(word:string, fs:FileStream):void //print keyWord token that we get to Txml file
        {
            mutable writer =  StreamWriter(fs);  

            writer.WriteLine("<keyword> " + word + " </keyword>");

            writer.Close();
            fs.Close();
        }
        public static symbol(word:string, fs:FileStream):void //print symbol token that we get to Txml file
        {
            mutable writer =  StreamWriter(fs);  

            writer.WriteLine("<symbol> " + word + " </symbol>");

            writer.Close();
            fs.Close();
        }
        public static identifier(word:string, fs:FileStream):void //print identifier token that we get to Txml file
        {
            mutable writer =  StreamWriter(fs);  

            writer.WriteLine("<identifier> " + word + " </identifier>");

            writer.Close();
            fs.Close();
        }
        public static intVal(word:string, fs:FileStream):void //print intVal token that we get to Txml file
        {
            mutable writer =  StreamWriter(fs);  

            writer.WriteLine("<integerConstant> " + word + " </integerConstant>");

            writer.Close();
            fs.Close();
        }
        public static stringVal(word:string, fs:FileStream):void //print stringVal token that we get to Txml file
        {
            mutable writer =  StreamWriter(fs);  
            mutable words = word.Replace("@", " "); 
            writer.WriteLine("<stringConstant> " + words + " </stringConstant>");

            writer.Close();
            fs.Close();
        }
    }
}