//אראל פלדמר 209374420
//שניאור גלעדי 301739561

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.IO.File;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;
using System.Net.Sockets;
using Nemerle.Imperative;

module Exe_2
{
    //SeesionData hendle all the line, by split the line 
    public static SeesionData(path : string, line : string, filenameWithoutPath:string) : void
    {
        mutable fs : FileStream;
        if (File.Exists(path))
        {
            fs = FileStream(path,FileMode.Append,FileAccess.Write);
        }
        else
        {
            fs =  FileStream(path, FileMode.Create,FileAccess.Write);
        }

        mutable words = line.Split(" ".ToArray(), StringSplitOptions.RemoveEmptyEntries);

        for(mutable i = 0; i < 1; i++)
        {
            mutable word = words[0];

            match(word)
            {
                | "add"      => Analyzer1.add(fs)
                | "sub"      => Analyzer1.sub(fs)
                | "and"      => Analyzer1.andd(fs)
                | "or"       => Analyzer1.or(fs)
                | "eq"       => Analyzer1.eq(fs)
                | "gt"       => Analyzer1.gt(fs)
                | "lt"       => Analyzer1.lt(fs)
                | "neg"      => Analyzer1.neg(fs)
                | "not"      => Analyzer1.not(fs)
                | "push"     => Analyzer1.push(fs, words[1], words[2], "true", filenameWithoutPath)
                | "pop"      => Analyzer1.pop(fs, words[1], words[2], "true", filenameWithoutPath);
                | "label"    => Analyzer2.label(fs, words[1], filenameWithoutPath)
                | "goto"     => Analyzer2.goto(fs, words[1], filenameWithoutPath)
                | "if-goto"  => Analyzer2.ifGoto(fs, words[1], filenameWithoutPath)
                | "function" => Analyzer2.function(fs, words[1], words[2], filenameWithoutPath)
                | "return"   => Analyzer2.returnn(fs, filenameWithoutPath);
                | "call"     => Analyzer2.call(fs, words[1], words[2], "true", filenameWithoutPath)
                | _ => ();
            }
        }
        fs.Close();
    }

    Main() : void
    {
        WriteLine("Pleas enter full directory path that you want to run");
        def ConstPath : string = ReadLine();

        mutable path : string = ConstPath;
        if(!Directory.Exists(path))
        {
            WriteLine("The path of folter, isn't correct! \nplease press anter to exit");
            _ = ReadLine();
            return;
        }
        else
        {
            mutable pathAsmFile : string = ConstPath + "\\" + Path.GetFileName(path) + ".asm";
            mutable asm = File.Create(pathAsmFile);
            asm.Close();

            //translate sys.vm FIRST (if exists) into the asm file, with initializing
            foreach (file in Directory.EnumerateFiles(path, "*.vm"))
            {
                if (Path.GetFileName(file).Equals("Sys.vm"))
                {
                    startAsmWithSys(file, pathAsmFile);
                }
                else {}
            }

            //translate the rest of the files
            foreach (file in Directory.EnumerateFiles(path, "*.vm"))
            {
                if (!Path.GetFileName(file).Equals("Sys.vm"))
                {
                    translateFile(file, pathAsmFile);
                }
                else {}
            }
        }
    }

    private static startAsmWithSys (sysFile : string, asmFile : string) : void 
    {
        //start commands
        initializing(sysFile, asmFile);
        mutable fs : FileStream;
        if(File.Exists(asmFile))
        {
            fs = FileStream(asmFile,FileMode.Append,FileAccess.Write);
        }
        else
        {
            fs = FileStream(asmFile, FileMode.Create,FileAccess.Write);
        }
        Analyzer2.call(fs, "Sys.init", "0", "true", "Sys");
        fs.Close();

        translateFile(sysFile, asmFile);
    }

    private static translateFile(vmFile : string, asmFile : string) : void
    {
        //mutable contentsOfFile : string = File.ReadAllText(vmFile);
        mutable vmPath : string = Path.GetFullPath(vmFile); 

        def lines = File.ReadLines(vmPath).Where(line => ! /*line.TrimStart.Equals("/") && !*/ line.Equals("")).ToArray();
        mutable filenameWithoutPath = Path.GetFileName(vmPath).Replace(".vm", "");

        foreach (line in lines)
        {
            SeesionData(Path.GetFullPath(asmFile), line, filenameWithoutPath);
        }
    }

    private static initializing(_vmFile:string, asmFile:string) : void 
    {
        mutable fs : FileStream;
        if (File.Exists(asmFile))
        {
            fs = FileStream(asmFile,FileMode.Append,FileAccess.Write);
        }
        else
        {
            fs = FileStream(asmFile, FileMode.Create,FileAccess.Write);
        }

        mutable writer =  StreamWriter(fs);

        writer.WriteLine("//Start of initializing");
        writer.WriteLine("@256\n" + "D=A\n" + "@SP\n" + "M=D\n");
        writer.WriteLine("@300\n" + "D=A\n" + "@LCL\n" + "M=D\n");
        writer.WriteLine("@400\n" + "D=A\n" + "@ARG\n" + "M=D\n");
        writer.WriteLine("@3000\n" + "D=A\n" + "@THIS\n" + "M=D\n");
        writer.WriteLine("@3010\n" + "D=A\n" + "@THAT\n" + "M=D");
        writer.WriteLine("//End of initializing\n");

        writer.Close();
        fs.Close();
    }
}
