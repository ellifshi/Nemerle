//אראל פלדמר 209374420
//שניאור גלעדי 301739561

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.IO.File;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;
using System.Net.Sockets;
using Nemerle.Imperative;

module Exe_2
{
    //SeesionData hendle all the line, by split the line 
    public static SeesionData(path : string, line : string) : void
    {
        mutable fs : FileStream;
        if (File.Exists(path))
        {
            fs = FileStream(path,FileMode.Append,FileAccess.Write);
        }
        else
        {
            fs =  FileStream(path, FileMode.Create,FileAccess.Write);
        }

        mutable words = line.Split(" ".ToArray(), StringSplitOptions.RemoveEmptyEntries);

        for(mutable i = 0; i < 1; i++)
        {
            mutable word = words[0];

            match(word)
            {
                | "add"      => Analyzer1.add(fs)
                | "sub"      => Analyzer1.sub(fs)
                | "and"      => Analyzer1.andd(fs)
                | "or"       => Analyzer1.or(fs)
                | "eq"       => Analyzer1.eq(fs)
                | "gt"       => Analyzer1.gt(fs)
                | "lt"       => Analyzer1.lt(fs)
                | "neg"      => Analyzer1.neg(fs)
                | "not"      => Analyzer1.not(fs)
                | "push"     => Analyzer1.push(fs, words[1], words[2])
                | "pop"      => Analyzer1.pop(fs, words[1], words[2]);
                | "label"    => Analyzer2.label(fs, words[1])
                | "goto"     => Analyzer2.goto(fs, words[1])
                | "if-goto"  => Analyzer2.ifGoto(fs, words[1])
                | "function" => Analyzer2.function(fs, words[1], words[2])
                | "return"   => Analyzer2.returnn(fs);
                | "call"     => Analyzer2.call(fs, words[1], words[2])
                | _ => ();
            }

        }
        fs.Close();
    }

    Main() : void
    {
        mutable contentsOfFile : string = ""; //for the contents of all matching file, (.vm)
        mutable path : string = @"C:\Users\Lenovo\Documents\GitHub\Exe 2\folder\FunctionCalls\StaticsTest";//for the path of all matching file, (.vm)
        if(!Directory.Exists(path))
        {
            WriteLine("The path of folter, isn't correct! \nplease press anter to exit");
            _ = ReadLine();
            return;
        }
        else
        {

            foreach (file in Directory.EnumerateFiles(path, "*.vm"))
            {
                contentsOfFile = File.ReadAllText(file); //the contents of file
                path = Path.GetFullPath(file);          //the path of file

                def lines = File.ReadLines(path).Where(line => !line.TrimStart.Equals("/") && !line.Equals("")).ToArray(); // we using in macro NEMERLE that print all line if it NOT commend or empty line
                path = Path.GetFullPath(file).Replace(".vm", ".asm");           //the path of file


                foreach (line in lines)
                {
                    SeesionData(path, line); // any line that not contain commend, we can sen it to the switch to split the line
                } 
            }

        }
        mutable temp = @"C:\Users\Lenovo\Documents\GitHub\Exe 2\folder\FunctionCalls\StaticsTest";
        MergeASMFile(temp, "*.asm", temp  + "\\"+Path.GetFileName( Path.GetDirectoryName(temp+ @"\*.vm"))+".asm");
        _ = ReadLine();
    }

    private static  MergeASMFile(inputDirectoryPath:string, inputFileNamePattern:string, outputFilePath:string):void
    {
        mutable inputFilePaths = Directory.GetFiles(inputDirectoryPath, inputFileNamePattern);

        using (mutable outputStream = File.Create(outputFilePath))
        {
            foreach (inputFilePath in inputFilePaths)
            {

                using (inputStream = File.OpenRead(inputFilePath))
                {
                    inputStream.CopyTo(outputStream);
                }

            }
        }
    }
}
