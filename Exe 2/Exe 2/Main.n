//אראל פלדמר 209374420
//שניאור גלעדי 301739561

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.IO.File;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;
using System.Net.Sockets;
using Nemerle.Imperative;

module Exe_2
{
    //SeesionData hendle all the line, by split the line 
    public static SeesionData(path : string, line : string, filenameWithoutPath:string) : void
    {
        mutable fs : FileStream;
        if (File.Exists(path))
        {
            fs = FileStream(path,FileMode.Append,FileAccess.Write);
        }
        else
        {
            fs =  FileStream(path, FileMode.Create,FileAccess.Write);
        }

        mutable words = line.Split(" ".ToArray(), StringSplitOptions.RemoveEmptyEntries);

        for(mutable i = 0; i < 1; i++)
        {
            mutable word = words[0];

            match(word)
            {
                | "add"      => Analyzer1.add(fs)
                | "sub"      => Analyzer1.sub(fs)
                | "and"      => Analyzer1.andd(fs)
                | "or"       => Analyzer1.or(fs)
                | "eq"       => Analyzer1.eq(fs)
                | "gt"       => Analyzer1.gt(fs)
                | "lt"       => Analyzer1.lt(fs)
                | "neg"      => Analyzer1.neg(fs)
                | "not"      => Analyzer1.not(fs)
                | "push"     => Analyzer1.push(fs, words[1], words[2], "true")
                | "pop"      => Analyzer1.pop(fs, words[1], words[2], "true");
                | "label"    => Analyzer2.label(fs, words[1], filenameWithoutPath)
                | "goto"     => Analyzer2.goto(fs, words[1], filenameWithoutPath)
                | "if-goto"  => Analyzer2.ifGoto(fs, words[1], filenameWithoutPath)
                | "function" => Analyzer2.function(fs, words[1], words[2])
                | "return"   => Analyzer2.returnn(fs);
                | "call"     => Analyzer2.call(fs, words[1], words[2], "true")
                | _ => ();
            }
        }
        fs.Close();
    }

    Main() : void
    {

        def ConstPath : string = @"C:\Users\Lenovo\Documents\GitHub\Exe 2\folder\FunctionCalls\FibonacciElement";// the constPath is for the main directory path that we need to run

        mutable contentsOfFile : string; //for the contents of all matching file
        mutable path : string = ConstPath; // the path is for the all files in the main directory that we need to run
        if(!Directory.Exists(ConstPath)) //if the main directory not exsist, so return
        {
            WriteLine("The path of folter, isn't correct! \nplease press anter to exit");
            _ = ReadLine();
            return;
        }
        else
        {
            //befor we run the program we need to delete all asm file
            foreach (file in Directory.EnumerateFiles(ConstPath, "*.asm")) 
            {
                mutable temp = Path.GetFullPath(file);
                System.IO.File.Delete(temp);
            }

            foreach (file in Directory.EnumerateFiles(ConstPath, "*.vm")) //we check for all VM files that in the main directory
            {
                if(Path.GetFileName(file).Equals("Sys.vm")) 
                {
                    System.IO.File.Move(path + "\\Sys.vm", path + "\\1-Sys.vm"); // we change the name of Sys.vm, because we must run this file first.
                }
                else
                {
                    continue;
                }
            }
            foreach (file in Directory.EnumerateFiles(path, "*.vm"))
            {
                contentsOfFile = File.ReadAllText(file); //the contents of file
                path = Path.GetFullPath(file);          //the path of specific file

                def lines = File.ReadLines(path).Where(line => ! /*line.TrimStart.Equals("/") && !*/ line.Equals("")).ToArray(); // we using in macro NEMERLE that print all line if it NOT commend or empty line
                path = Path.GetFullPath(file).Replace(".vm", ".asm");  //the path of asm file

                /*if(Path.GetFileName(file).Equals("Sys.vm"))
                {
                    path = Path.GetFullPath(file).Replace(".vm", ".asm").Replace("Sys.asm",  "1-Sys.asm"); //the path of file for the whole file
                }
                else
                {

                }*/
                mutable filenameWithoutPath = Path.GetFileName(path).Replace(".asm", "");//the label must be unic so we sent the file name to seesion tata

                foreach (line in lines)
                {
                    SeesionData(path, line, filenameWithoutPath); // any line that not contain commend, we can sen it to the switch to split the line
                } 
            }
            //after we run all the asm file we return to the Sys.vm
            foreach (file in Directory.EnumerateFiles(ConstPath, "*.vm"))
            {
                path = Path.GetFullPath(file); 
                if(Path.GetFileName(file).Equals("1-Sys.vm"))
                {
                    System.IO.File.Move(ConstPath + "\\1-Sys.vm", ConstPath + "\\Sys.vm");
                }
                else
                {
                }
            }
        }
        def fCount = Directory.GetFiles(ConstPath, "*.asm", SearchOption.TopDirectoryOnly).Length; //if we hane some asm files, we need to sent all the file to become one file.

        if(fCount > 1)
        {
            MergeASMFile(ConstPath, "*.asm", ConstPath  + "\\"+ Path.GetFileName( Path.GetDirectoryName(ConstPath+ @"\*.vm"))+".asm");
        }
        else //if we have only one asm file, so we don't nothing
        {} 

        //this loop for delete the temp files, if some file exsist we merge him to on file so we don't need them anymoor
        foreach (file in Directory.EnumerateFiles(ConstPath, "*.asm")) 
        {
            path = Path.GetFullPath(file);

            if(Path.GetFileName(file).Equals(Path.GetFileName(Path.GetDirectoryName(path)) +".asm"))
            {
                continue;
            }
            else
            {
                System.IO.File.Delete(path);
            }
        }
        _ = ReadLine();
    }

    private static  MergeASMFile(inputDirectoryPath:string, inputFileNamePattern:string, outputFilePath:string):void
    {
        mutable inputFilePaths = Directory.GetFiles(inputDirectoryPath, inputFileNamePattern);

        using (mutable outputStream = File.Create(outputFilePath))
        {
            foreach (inputFilePath in inputFilePaths)
            {
                using (inputStream = File.OpenRead(inputFilePath))
                {
                    inputStream.CopyTo(outputStream);
                }

            }
        }
    }
}
