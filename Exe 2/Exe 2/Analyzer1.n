using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.IO.File;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;
using System.Net.Sockets;
using Nemerle.Imperative;

namespace Exe_2
{
/// <summary>
/// Translate VM commands: add, sub, and, or, not, neg, eq, gt, lt, push and pop.
/// </summary>
    module Analyzer1
    {
        public static mutable lableCounter = 0;

        public static add(fs:FileStream) : void
        {
            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //pop first val to d
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("D=M");

        //pop second val to a
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("A=M");

        //compute
            writer.WriteLine("D=D+A"); 

        //push to stack
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("M=M+1");
            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static sub(fs:FileStream) : void
        {
            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //push first val to d
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("D=M");

        //push second val to a
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("A=M");

        //compute
            writer.WriteLine("D=A-D"); 

        //push to stack
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("M=M+1");
            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static andd(fs:FileStream) : void
        {
            mutable writer =  StreamWriter(fs);   
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //get first val to d
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("D=M");

        //get second val to a
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("A=M");

        //compute
            writer.WriteLine("D=D&A"); 

        //push to stack
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("M=M+1");

            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static or(fs:FileStream) : void
        {
            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //get first val to d
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("D=M");

        //ger second val to a
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("A=M");

        //compute
            writer.WriteLine("D=D|A"); 

        //push to stack
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("M=M+1");

            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static eq(fs:FileStream) : void
        {
            mutable fname = "";

            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //pop to D
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("D=M");

        //pop to A
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("A=M");
            writer.WriteLine("A=M");

        //if a == d jump
            writer.WriteLine("D=A-D");
            mutable lable1 = "EQ_"+fname+lableCounter;
            lableCounter++;
            writer.WriteLine("@"+lable1);
            writer.WriteLine("D;JEQ");

        //else  do d=0 and jump to the end
            writer.WriteLine("D=0");
            mutable lable2 = "END_"+fname+lableCounter;
            lableCounter++;
            writer.WriteLine("@"+lable2);
            writer.WriteLine("1;JMP");

        //if condition
            writer.WriteLine("("+lable1+")");
            writer.WriteLine("D=-1");

        //end - push d
            writer.WriteLine("("+lable2+")");
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("M=M+1");

            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static gt(fs:FileStream) : void
        {
            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //generate lables
            mutable fname = "";
            mutable lable1 = "Label_"+fname+lableCounter; //"D=A-D
            lableCounter++;
            mutable lable2 = "Label_" + fname+lableCounter;
            lableCounter++;

        //get first val to d
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("D=M");

        //get second val to a
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("A=M");

        //check if a > d
            writer.WriteLine("D=A-D");
            writer.WriteLine("@"+lable1);
            writer.WriteLine("D ; JGT");

        //else d=0
            writer.WriteLine("@"+lable2);
            writer.WriteLine("D=0 ; JMP");

        //if true d=-1
            writer.WriteLine("("+lable1+")");
            writer.WriteLine("D=-1");

        //end - push d to stack
            writer.WriteLine("("+lable2+")");
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("M=M+1");  

            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static lt(fs:FileStream) : void
        {
            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //generate lables
            mutable fname = "";
            mutable lable1 = "Label_"+fname+lableCounter;
            lableCounter++;
            mutable lable2 = "Label_" + fname+lableCounter;
            lableCounter++;

        //pop first val to d
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("D=M");

        //pop second val to a
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("A=M");

        //check if d > a (a < d)
            writer.WriteLine("D=D-A");
            writer.WriteLine("@"+lable1);
            writer.WriteLine("D ; JGT");

        //else d = 0, jmp to end
            writer.WriteLine("@"+lable2);
            writer.WriteLine("D=0 ; JEQ");

        //if true, d = -1
            writer.WriteLine("("+lable1+")");
            writer.WriteLine("D=-1");

        //end - push to stack
            writer.WriteLine("("+lable2+")");
            writer.WriteLine("@SP");
            writer.WriteLine("A=M");
            writer.WriteLine("M=D");
            writer.WriteLine("@SP");
            writer.WriteLine("M=M+1");

            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static neg(fs:FileStream) : void
        {

            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //pop
            writer.WriteLine("@SP");
            writer.WriteLine("A=M-1");
            writer.WriteLine("D=M");

        //compute and push
            writer.WriteLine("M=-D");

            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static not(fs:FileStream) : void
        {
            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name);
        //pop
            writer.WriteLine("@SP");
            writer.WriteLine("A=M-1");
            writer.WriteLine("D=M");

        //compute and push
            writer.WriteLine("M=!D");

            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }
        public static push(fs:FileStream, seg:string, offset:string) : void
        {

            mutable writer =  StreamWriter(fs);
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name + " " + seg + " " + offset);
            writer.WriteLine("@" + offset);
            writer.WriteLine("D=A");

            if (seg.Equals("constant"))
            {
                writer.WriteLine("@SP");
                writer.WriteLine("A=M");
                writer.WriteLine("M=D");
                writer.WriteLine("@SP");
                writer.WriteLine("M=M+1");
                writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name + " " + seg + " " + offset);
                writer.WriteLine();
                writer.Close();
                fs.Close();
                return;
            }
            else
            {
                match(seg)
                {
                    | "local" => writer.WriteLine("@LCL" + '\n' + "A=M+D" + '\n' + "D=M")
                    | "argument" => writer.WriteLine("@ARG" + '\n' + "A=M+D" + '\n' + "D=M")
                    | "this" => writer.WriteLine("@THIS" + '\n' + "A=M+D" + '\n' + "D=M")
                    | "that" => writer.WriteLine("@THAT" + '\n' + "A=M+D" + '\n' + "D=M")
                    | "static" => writer.WriteLine("@16" + '\n' + "A=A+D" + '\n' + "D=M")
                    | "pointer" => writer.WriteLine("@3" + '\n' + "A=A+D" + '\n' + "D=M")
                    | "temp" => writer.WriteLine("@5" + '\n' + "A=A+D" + '\n' + "D=M") 
                    | _ => ();
                }

                writer.WriteLine("@SP");
                writer.WriteLine("A=M");
                writer.WriteLine("M=D");
                writer.WriteLine("@SP");
                writer.WriteLine("M=M+1");

                writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name + " " + seg + " " + offset);
                writer.WriteLine();
                writer.Close();
                fs.Close();
            }
        }
        public static pop(fs:FileStream, seg:string, offset:string) : void
        {
            mutable writer =  StreamWriter(fs);   
            writer.WriteLine("//Start " + System.Reflection.MethodBase.GetCurrentMethod().Name + " " + seg + " " + offset);
            writer.WriteLine("@SP");
            writer.WriteLine("M=M-1");
            if (seg.Equals("constant"))
            {
                writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name + " " + seg + " " + offset);
                writer.WriteLine();
                writer.Close();
                fs.Close();
                return;
            }
            else
            {
                writer.WriteLine("@" + offset);
                writer.WriteLine("D=A");
                match(seg)
                {
                    | "local" => writer.WriteLine("@LCL" + '\n' + "D=M+D")
                    | "argument" => writer.WriteLine("@ARG" + '\n' + "D=M+D")
                    | "this" => writer.WriteLine("@THIS" + '\n' + "D=M+D")
                    | "that" => writer.WriteLine("@THAT" + '\n' + "D=M+D")
                    | "static" => writer.WriteLine("@16" + '\n' + "D=A+D")
                    | "pointer" => writer.WriteLine("@3" + '\n' + "D=A+D")
                    | "temp" => writer.WriteLine("@5" + '\n' + "D=A+D") 
                    | _ => ();
                }
                writer.WriteLine("@R13");
                writer.WriteLine("M=D");
                writer.WriteLine("@SP");
                writer.WriteLine("A=M");
                writer.WriteLine("D=M");
                writer.WriteLine("@R13");
                writer.WriteLine("A=M");   
                writer.WriteLine("M=D"); 
            }
            writer.WriteLine("//End " + System.Reflection.MethodBase.GetCurrentMethod().Name + " " + seg + " " + offset);
            writer.WriteLine();
            writer.Close();
            fs.Close();
        }

    }
}
