using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.IO.File;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;
using System.Net.Sockets;
using Nemerle.Imperative;
using System.Collections.DictionaryEntry;
using Nemerle.Extensions;
using System.Text.RegularExpressions;
using System.IO.FileAttributes;

namespace Exe_5
{
    class CompilationEngine
    {
        public mutable toVMFile:VMWriter;        
        public static mutable count = 0;
        public mutable token:string;// one token. for example "<keyword> class </keyword>"
        public mutable tokensFromJackTokenizer : StreamReader; //all the tokens
        public mutable symbolTableClass : SymbolTable;
        public mutable symbolTableSubRoutine : SymbolTable;
        public mutable fileName:string;
        public mutable whileLabelCounter : int;
        public mutable ifLabelCounter : int;
        public mutable tokesFromTxmlFile:StreamWriter;
        public mutable thisCompiledClassName:string;
     
        
        public this(ListOfTokens:List[Object], pathVMFile:string)             
        {
            fromListToWriteReader(pathVMFile.Replace(".vm", ".txt"), ListOfTokens);
            tokensFromJackTokenizer = StreamReader(pathVMFile.Replace(".vm", ".txt"));

            symbolTableClass = SymbolTable();
            symbolTableSubRoutine = SymbolTable();
            whileLabelCounter = 0;
            ifLabelCounter = 0;

            toVMFile = Exe_5.VMWriter(pathVMFile);
            fileName = Path.GetFileName(pathVMFile).Replace(".vm", "");
            CompileClass();
            toVMFile.close();
            tokensFromJackTokenizer.Close();
            //Exe_5.VMWriter.close();
        }
        public fromListToWriteReader(pathTXMLFile:string, ListOfTokens:List[Object]):void
        {
            mutable fs : FileStream;
            fs =  FileStream(pathTXMLFile, FileMode.Create,FileAccess.Write);
            mutable writer =  StreamWriter(fs);
            foreach(line in ListOfTokens)
            {
                writer.WriteLine(line);
            }
            writer.Close();
            fs.Close();
        }
        public hasMoreTokens():bool
        {
            tokensFromJackTokenizer.EndOfStream;
        }
        public advance():void
        {
            when(!hasMoreTokens())           
            {
                token = tokensFromJackTokenizer.ReadLine();
            } 
        }
        /*public hasMoreTokens():bool
        {
            count < tokensFromJackTokenizer.Count;
        }
        public advance():void
        {      
            when(hasMoreTokens())           
            {    
                mutable temp  = tokensFromJackTokenizer.ToArray();
                mutable temp1 = Array.ConvertAll(temp, x=>x.ToString()); 
                token = temp1[count]; //the temp and the temp1, is because that I don't success to assigning to the token the specific token
                count ++;
            }         
        }*/
        public returnTypeToken():string
        {
            mutable line = token.Replace("<", "").Replace(">", "").Split(' ');           
            line[0]; //return the token type : keyword/symbol etc
        }   
        public returnKeywordToken():string
        {
            mutable line = token.Split(' ');
            line[1]; //retorn the keyword token : class/function etc
        }
        public returnSymbolToken():string
        {
            mutable line = token.Split(' ');
            line[1]; //return the symbol token : '=', '<' etc.
        }
        public returnIdentifierToken():string
        {
            mutable line = token.Split(' ');
            line[1]; //return the identifier token : main/SquareGame
        }
        public returnIntegerConstantValue():int
        {
            mutable line = token.Split(' ');
            int.Parse(line[1]); //return the integer value token : 254, 5 etc.
        }
        public returnStringConstantValue():string
        {
            mutable line = token;
            line = line.Replace("<stringConstant>", "");
            line = line.Replace("</stringConstant>", "");
            line; //return the String Constant Value token : hello world!  
        }
        public isOperandToken():bool
        {
            match(returnSymbolToken())
            {
                | "+"|"-"|"*"|"/"|"="|"|"|"&"|"&amp;"|"&lt;"|"&gt;" =>  true;
                | _=> false;
            }
        }
        
        public returnNToken(n:int):void
        {
            for(mutable i = 0; i < n; i++)
            {
                advance();
            }
        }

        // 'class' className '{' classVarDec* subroutineDec* '}'
        public CompileClass():void
        {
            /*returnNToken(1); //'class'
            thisCompiledClassName = returnIdentifierToken();
            returnNToken(3);*/ returnNToken(4);
            
            while(returnKeywordToken().Equals("static")  || returnKeywordToken().Equals("field"))
            {
                CompileClassVarDec(); //classVarDec
                //advance();//next token for classVarDec
                returnNToken(1); //classVarDec*
            }
            while(returnKeywordToken().Equals("constructor")  || returnKeywordToken().Equals("function") || returnKeywordToken().Equals("method"))
            {
                CompileSubroutineDec(); //subroutineDec
            }
            returnNToken(1); //'}'
        }
        //'int' | 'char' | 'boolean' | className 
        public CompileType():string
        {
            mutable temp :string;
            if(returnTypeToken().Equals("keyword"))
            {
                temp = returnKeywordToken(); //'int' | 'char' | 'boolean' 
            }
            else
            {
                temp = returnIdentifierToken(); //className            
            }
            temp   
        }      
        //('static' | 'field' ) type varName (',' varName)* ';' 
        public CompileClassVarDec():void
        {
            mutable kind : string = returnKeywordToken();//('static' | 'field' )
            returnNToken(1); //type
            mutable type : string = CompileType(); //type
            returnNToken(1); //varName
            symbolTableClass.define(returnIdentifierToken(), type, kind);
            returnNToken(1); //','
            while(returnSymbolToken().Equals(","))
            {
                returnNToken(1); //varName
                symbolTableClass.define(returnIdentifierToken(), type, kind);
                returnNToken(1);// could be ',' OR ';' for the end.
            }
        }
        
        //('constructor' | 'function' | 'method') ('void' | type) subroutineName '(' parameterList ')' subroutineBody
        public CompileSubroutineDec():void
        { 
            symbolTableSubRoutine.cleanSubroutine(); //new subRoutins
            whileLabelCounter = 0;
            ifLabelCounter = 0;       
            mutable type = CompileType(); //('void' | type)
            returnNToken(2); //('void' | type), subroutineName
            mutable name = returnIdentifierToken();  
            when(name.Equals("method"))
            {
                //symbolTableSubRoutine.define("this", name, "argument");
                symbolTableSubRoutine.define("this", fileName, "argument");
            }
            returnNToken(2);//'(', parameterList
            
            CompileParameterList();//parameterList
            returnNToken(1);//')'
            
            CompileSuroutineBody(type, name);//subroutineBody
        }
        
        // '{' varDec* stetmenss '}'
        public CompileSuroutineBody(type:string, name:string):void
        {
            returnNToken(1);//'{'
            while(returnKeywordToken().Equals("var"))
            {
                CompileVarDec();  //varDec
            }
            match(type)
            {
                | "constructor" =>
                {
                    toVMFile.writeFunction(fileName + "." + name, symbolTableSubRoutine.varCount("local"));
                    toVMFile.writePush("constant", symbolTableClass.varCount("field"));
                    toVMFile.writeCall("Memory.alloc",1);
                    toVMFile.writePop("pointer", 0);
                }
                | "method" => 
                {
                    toVMFile.writeFunction(fileName + "." + name, symbolTableSubRoutine.varCount("local"));
                    toVMFile.writePush("argument", 0);
                    toVMFile.writePop("pointer", 0);
                }
                | "function" =>
                {
                    toVMFile.writeFunction(fileName + "." + name, symbolTableSubRoutine.varCount("local"));
                }
                |_=> ()
            }
            
            CompileStatements(); //statements
            returnNToken(1);//'}'          
        }  
        //( (type varName) (',' type varName)*)? 
        public CompileParameterList():void
        {      
            when(returnSymbolToken() != ")" )
            {
                mutable type = CompileType(); //type

                returnNToken(1);//varName
                symbolTableSubRoutine.define(returnIdentifierToken(), type, "argument");
                returnNToken(1);//',' OR ')'
                while(returnSymbolToken().Equals(",")) //(',' type varName)*
                {
                    returnNToken(1);//type
                    type = CompileType(); //type
                    returnNToken(1);//varName
                    symbolTableSubRoutine.define(returnIdentifierToken(), type, "argument");
                    returnNToken(1);//',' OR ')'
                }
            }      
        }
        
        //'var' type varName (',' varName)* ';'
        public CompileVarDec():void
        {
            returnNToken(1);//type
            mutable type = CompileType(); //type
            returnNToken(1);//varName
            symbolTableSubRoutine.define(returnIdentifierToken(), type, "local");
            returnNToken(1);//could be ';' OR ','
            while(returnSymbolToken().Equals(",")) //(',' varName)*
            {
                returnNToken(1); //varName
                symbolTableSubRoutine.define(returnIdentifierToken(), type, "local");
                returnNToken(1);//could be ';' OR ','
            }
            returnNToken(1); //next stetmens   
        }
        //(letStatement | ifStatement | whileStatement | doStatement | returnStatement)*
        public CompileStatements():void
        {
            while(returnTypeToken().Equals("keyword")) 
            {
                match(returnKeywordToken())
                {
                    |"let" => CompileLet();
                    |"if" => CompileIf();
                    |"while" => CompileWhile();
                    |"do" => CompileDo();
                    |"return" => CompileReturn();
                    |_=>()
                }
            }  
        }
        
        //'do' subroutineCall ';'
        public CompileDo():void
        {
            returnNToken(1); //for example 'Output'
            CompileSubroutineCall(""); //subroutineCall
            returnNToken(1);  //next token, could be another 'do' for example
            toVMFile.writePop("temp", 0);
        }
        //'let' varName ('[' expression ']')? '=' expression ';'
        public CompileLet():void 
        {
            returnNToken(1); //varName
            mutable kind = kind(returnIdentifierToken());
            mutable index = index(returnIdentifierToken());
            returnNToken(1); //'['
            if(returnSymbolToken().Equals("[")) //('[' expression ']')?
            {
                returnNToken(1); //expression
                CompileExpression();
                toVMFile.writePush(kind, index);
                toVMFile.WriteArithmetic("add");
                //printXmlPattreSymbol(returnSymbolToken());//]
                returnNToken(2); //'=', expression
                
                CompileExpression(); //expression
                returnNToken(1); //next token
                toVMFile.writePop("temp", 0);
                toVMFile.writePop("pointer", 1);
                toVMFile.writePush("temp", 0);
                toVMFile.writePop("that", 0);         
            }
            else
            {
                returnNToken(1); //'='
                CompileExpression(); //expression
                returnNToken(1); //next token
                toVMFile.writePop(kind, index);
            }
        }
        
        //'while' '(' expression ')' '{' statements '}'  
        public CompileWhile():void
        {
            mutable tempCounter : int = whileLabelCounter;
            whileLabelCounter++;
            
            returnNToken(2); //'(', expression
            toVMFile.WriteLabel("WHILE_EXP" + tempCounter.ToString());
            CompileExpression();//expression
            toVMFile.WriteArithmetic("not");
            toVMFile.WriteIf("WHILE_END" + tempCounter);
            returnNToken(1);//'{'
            returnNToken(1); //statements
            CompileStatements();
            returnNToken(1); //'}"
            toVMFile.WriteGoto("WHILE_EXP" + tempCounter);
            toVMFile.WriteLabel("WHILE_END" + tempCounter);
        }
        
        //'return' expression? ';' 
        public CompileReturn():void
        {
            returnNToken(1); //expression
            if(returnSymbolToken() != ";")
            {
                CompileExpression();//expression
                returnNToken(1);
            }
            else
            {
                returnNToken(1);//next token
                toVMFile.writePush("constant", 0);
            }
            toVMFile.writeReturn();
        }
        
        // 'if' ( experssion ) '{' stestmens '}' (else '{' stetmens '}')?
        public CompileIf():void
        {
            mutable tempCounter : int = ifLabelCounter;
            ifLabelCounter++;
            returnNToken(2); // '(', experssion
            CompileExpression();
            toVMFile.WriteIf("IF_TRUE" + tempCounter);   
            toVMFile.WriteGoto("IF_FALSE" + tempCounter);
            toVMFile.WriteLabel("IF_TRUE" + tempCounter);
            returnNToken(2); //'{', stestmens
            CompileStatements();
            returnNToken(1); //next token OR 'else'

            if(returnKeywordToken().Equals("else"))
            {
                toVMFile.WriteGoto("IF_END" + tempCounter);
                toVMFile.WriteLabel("IF_FALSE" + tempCounter);
                returnNToken(2); //'{', stetmens
                CompileStatements(); //stetmens
                returnNToken(1); //'}'
                toVMFile.WriteLabel("IF_END" + tempCounter);
            }
            else
            {
                toVMFile.WriteLabel("IF_FALSE" + tempCounter);
            }
        }
        //term (op term)* 
        public CompileExpression():void
        {            
            CompileTerm();//term
            while(isOperandToken())
            {
                mutable temp = returnSymbolToken();
                returnNToken(1); //term
                CompileTerm();
                match(temp)
                {
                    |"+" => toVMFile.WriteArithmetic("add");
                    |"-" => toVMFile.WriteArithmetic("sub");
                    |"*" => toVMFile.writeCall("Math.multiply", 2);
                    |"/" => toVMFile.writeCall("Math.divide",  2);
                    |"=" => toVMFile.WriteArithmetic("eq");
                    |"|" => toVMFile.WriteArithmetic("or");
                    |"&" => toVMFile.WriteArithmetic("and");
                    |"&amp;" => toVMFile.WriteArithmetic("and");
                    |"&lt;" => toVMFile.WriteArithmetic("lt");
                    |"&gt;" => toVMFile.WriteArithmetic("gt");
                    |_=>()
                }
            }
        }
        
        //integerConstant | stringConstant | keywordConstant | varName | varName '[' expression ']' |identifier > subroutineCall | '(' expression ')' | unaryOp term
        public CompileTerm():void
        {
            match(returnTypeToken())
            {
                |"integerConstant" =>
                {
                    mutable temp : string = returnIntegerConstantValue().ToString();

                    if(temp.StartsWith("-"))
                    {
                        toVMFile.writePush("constant", Int32.Parse(temp.Substring(1)));
                        toVMFile.WriteArithmetic("neg");
                    }
                    else
                    {
                        toVMFile.writePush("constant", returnIntegerConstantValue());
                    }

                    returnNToken(1);
                }
                |"stringConstant"=>
                {
                    toVMFile.writePush("constant", returnStringConstantValue().Length);
                    toVMFile.writeCall("String.new", 1);
                    for(mutable i = 0; i < returnStringConstantValue().Length; i++)
                    {
                        toVMFile.writePush("constant", System.Convert.ToInt32(returnStringConstantValue()[i]));
                        toVMFile.writeCall("String.appendChar", 2);
                    }
                    returnNToken(1);
                }
                |"keyword" =>
                {
                    match(returnKeywordToken())
                    {
                        |"false" => toVMFile.writePush("constant", 0);
                        |"true" =>
                        {
                            toVMFile.writePush("constant", 0);
                            toVMFile.WriteArithmetic("not");
                        }
                        |"this" =>toVMFile.writePush("pointer", 0);
                        |"null" => toVMFile.writePush("constant", 0);
                        |_ => ()
                    }
                    returnNToken(1);
                }
                |"identifier" =>
                {
                    mutable temp : string = returnIdentifierToken();
                    returnNToken(1);
                    match(returnSymbolToken())
                    {
                        |"[" =>
                        {
                            returnNToken(1);
                            CompileExpression(); //expression
                            returnNToken(1); //']'
                            toVMFile.writePush(kind(temp), index(temp));
                            toVMFile.WriteArithmetic("add");
                            toVMFile.writePop("pointer", 1);
                            toVMFile.writePush("that", 0);
                        }
                        |"("|"." =>
                        {                       
                            CompileSubroutineCall(temp); //subRoutinsCall
                        }
                        |_=> toVMFile.writePush(kind(temp), index(temp));
                    }
                }
                |"symbol" =>
                {
                    match(returnSymbolToken())
                    {
                        |"(" =>
                        {
                            returnNToken(1);//exoression
                            CompileExpression(); //expression 
                            returnNToken(1);//')'
                        }
                        |"-" =>
                        {
                            returnNToken(1);
                            CompileTerm(); //term
                            toVMFile.WriteArithmetic("neg");
                        }
                        |"~" =>
                        {
                            returnNToken(1);
                            CompileTerm(); //term
                            toVMFile.WriteArithmetic("not");
                        }
                        |_ =>()
                    }
                }
            }      
        } 
        
        public kind(name:string):string
        {
            mutable temp : string = "";
            if(symbolTableSubRoutine.alreadyExists(name))
            {
                 temp = symbolTableSubRoutine.kindOf(name);
            }
            else if(symbolTableClass.alreadyExists(name))
            {
                if(symbolTableClass.kindOf(name) == "field")
                {
                    temp = "this";
                }
                else
                {
                    temp = "static";
                }      
            }
            else
            {
                temp = "";
            }           
            temp
        }
        public index(identifier:string):int
        {
            mutable temp :int;
            if(symbolTableSubRoutine.alreadyExists(identifier))
            {
                temp = symbolTableSubRoutine.indexOf(identifier);
            }        
            else
            {
                temp = symbolTableClass.indexOf(identifier);
            }  
            temp
        } 


        
        
        //subroutineName '(' expressionList ')' | ( className | varName) '.' subroutineName '(' expressionList ')' 
        public CompileSubroutineCall(name:string):void
        {
            mutable nameTemp :string = name;
            mutable finalClassName : string;
            mutable countOfArguments : int = 0;
            
            when(name.Equals(""))
            {
                nameTemp = returnIdentifierToken();       
                returnNToken(1);
            }
            
            if(returnSymbolToken().Equals("."))
            {
                returnNToken(1); //subroutineName
                mutable className = nameTemp;
                mutable subRotinName = returnIdentifierToken();
                
                if(symbolTableSubRoutine.alreadyExists(className))
                {
                    finalClassName = symbolTableSubRoutine.typeOf(className) + "." + subRotinName;
                    toVMFile.writePush(kind(className), index(className));
                    countOfArguments++;
                }
                else if(symbolTableClass.alreadyExists(className))
                {
                    finalClassName = symbolTableClass.typeOf(className) + "." + subRotinName;
                    toVMFile.writePush(kind(className), index(className));
                    countOfArguments++;
                }
                else
                {
                    finalClassName = className + "." + subRotinName;
                } 
                returnNToken(1);
            }
            else
            {
                finalClassName = fileName + "." + nameTemp;
                toVMFile.writePush("pointer", 0);
                countOfArguments ++;
            }
            returnNToken(1);
            countOfArguments += CompileExpressionList();
            returnNToken(1);
            toVMFile.writeCall(finalClassName, countOfArguments);
            
        }
        //(expression (',' expression)* )? 
        public CompileExpressionList():int
        {
            mutable count :int = 0;
            when(returnSymbolToken() != ")")
            {
                CompileExpression();//expression
                count ++;
                while(returnSymbolToken().Equals(","))
                {
                    returnNToken(1);
                    CompileExpression();//expression
                    count ++;
                }
            }
            count
        }
    }
}