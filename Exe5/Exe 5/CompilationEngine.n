using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System.IO.File;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;
using System.Net.Sockets;
using Nemerle.Imperative;
using System.Collections.DictionaryEntry;
using Nemerle.Extensions;
using System.Text.RegularExpressions;
using System.IO.FileAttributes;
using SymbolTable.h;

namespace Exe_5
{
    class CompilationEngine
    {
        //mutable toVMFile:StreamWriter;
        mutable toVMFile:VMWriter;        
        public static mutable count = 0;
        public mutable token:string;// one token. for example "<keyword> class </keyword>"
        public mutable tokensFromJackTokenizer = List(); //all the tokens
        private mutable symbolTable : SymbolTable;
        

        public this(ListOfTokens:List[Object], pathVMFile:string)             
        {
            tokensFromJackTokenizer = ListOfTokens;
            toVMFile = Exe_5.VMWriter(pathVMFile);
            CompileClass();
            //toVMFile.Close();
        }

        public hasMoreTokens(count:int):bool
        {
            count < tokensFromJackTokenizer.Count;
        }
        public advance():void
        {      
            when(hasMoreTokens(count))           
            {    
                mutable temp  = tokensFromJackTokenizer.ToArray();
                mutable temp1 = Array.ConvertAll(temp, x=>x.ToString()); 
                token = temp1[count]; //the temp and the temp1, is because that I don't success to assigning to the token the specific token
                count ++;
            }         
        }
        
        public returnTypeToken():string
        {
            mutable line = token.Replace("<", "").Replace(">", "").Split(' ');           
            line[0]; //return the token type : keyword/symbol etc
        }   
        
        public returnKeywordToken():string
        {
            mutable line = token.Split(' ');
            line[1]; //retorn the keyword token : class/function etc
        }
        public returnSymbolToken():string
        {
            mutable line = token.Split(' ');
            line[1]; //return the symbol token : '=', '<' etc.
        }
        public returnIdentifierToken():string
        {
            mutable line = token.Split(' ');
            line[1]; //return the identifier token : main/SquareGame
        }
        public returnIntegerConstantValue():int
        {
            mutable line = token.Split(' ');
            int.Parse(line[1]); //return the integer value token : 254, 5 etc.
        }
        public returnStringConstantValue():string
        {
            mutable line = token;
            line = line.Replace("<stringConstant>", "");
            line = line.Replace("</stringConstant>", "");
            line; //return the String Constant Value token : hello world!  
        }
        public isOperandToken():bool
        {
            match(returnSymbolToken())
            {
                | "+"|"-"|"*"|"/"|"="|"|"|"&"|"&amp;"|"&lt;"|"&gt;" =>  true;
                | _=> false;
            }
        }  
        
        //if we want to print text with '<' and '>'
        public printXmlPattrenToken(word:string):void
        {
            //toVMFile.WriteLine(word.Replace("/",""));//"<" + word + ">");
        }
        //print keyword token
        public printXmlPattrenKeyword(word:string):void
        {  
            //toVMFile.WriteLine(word);//Tabs(countOfIndention) + "<keyword> " + word + " </keyword>"); 
        }
        //print identifier token
        public printXmlPattrenIdentifier(word:string):void
        {
            //toVMFile.WriteLine(word);//Tabs(countOfIndention) + "<identifier> " + word + " </identifier>"); 
        }
        //print symbol token
        public printXmlPattreSymbol(word:string):void
        {
            //toVMFile.WriteLine(word);//Tabs(countOfIndention) + "<symbol> " + word + " </symbol>");
        }
        //print integer token
        public printXmlPattrenIntegerConstant(word:int):void
        {
            //toVMFile.WriteLine(word);//Tabs(countOfIndention) + "<integerConstant> " + word + " </integerConstant>"); 
        }
        //print string token
        public printXmlPattreStringConstant(word:string):void
        {
            //toVMFile.WriteLine(word);//Tabs(countOfIndention) + "<stringConstant>" + word + "</stringConstant>");
        }
        
        
        // 'class' className '{' classVarDec* subroutineDec* '}'
        public CompileClass():void
        {
            //printXmlPattrenToken("class");
            advance(); 
            when(returnKeywordToken().Equals("class"))
            {
               printXmlPattrenKeyword(returnKeywordToken());//'class'
            }  
            advance();
            when(returnTypeToken().Equals("identifier"))
            {
                printXmlPattrenIdentifier(returnIdentifierToken());//className
                symbolTable = SymbolTable(returnIdentifierToken());
            } 
            advance();
            when(returnSymbolToken().Equals("{"))
            {
                printXmlPattreSymbol(returnSymbolToken()); //'{'
            } 
            advance();
            while(returnKeywordToken().Equals("static")  || returnKeywordToken().Equals("field"))
            {
                CompileClassVarDec(); //classVarDec
                advance();//next token for classVarDec
            }
            while(returnKeywordToken().Equals("constructor")  || returnKeywordToken().Equals("function") || returnKeywordToken().Equals("method"))
            {
                CompileSubroutineDec(); //subroutineDec
            }

            when(returnSymbolToken().Equals( "}"))
            {
                printXmlPattreSymbol(returnSymbolToken()); //'}'
                advance();
            }
            //printXmlPattrenToken("/class");
        }
        //'int' | 'char' | 'boolean' | className 
        public CompileType():string
        {
            mutable ret : string;
            
            if(returnTypeToken().Equals("keyword"))
            {
                printXmlPattrenKeyword(returnKeywordToken()); //'int' | 'char' | 'boolean' 
                ret = returnKeywordToken();
            }
            else
            {
                printXmlPattrenIdentifier(returnIdentifierToken()); //className
                ret = returnKeywordToken();
            }
            advance();   
            
            ret;
        }      
        //('static' | 'field' ) type varName (',' varName)* ';' 
        public CompileClassVarDec():void
        {
            //printXmlPattrenToken("classVarDec");
            printXmlPattrenKeyword(returnKeywordToken()); //('static' | 'field' )
            mutable kind = returnKeywordToken();
            advance();
            mutable type : string = CompileType(); //type
            mutable name;
            when(returnTypeToken().Equals("identifier"))
            {
                printXmlPattrenIdentifier(returnIdentifierToken());//varName
                name = returnIdentifierToken();
                
                match(kind) {
                    | "static" => symbolTable.addStatic(name,type);
                    | "field" => symbolTable.addField(name,type);
                }
            }    
            advance();
            while(returnSymbolToken().Equals(","))
            {
                printXmlPattreSymbol(returnSymbolToken()); //','
                advance();
                when(returnTypeToken().Equals("identifier"))
                {
                    printXmlPattrenIdentifier(returnIdentifierToken()); //varName
                    name = returnIdentifierToken();
                }
                
                match(kind) {
                    | "static" => symbolTable.addStatic(name,type);
                    | "field" => symbolTable.addField(name,type);
                }
                
                advance();
            }
            when(returnSymbolToken().Equals(";")) 
            {
                printXmlPattreSymbol(returnSymbolToken()); //';'
            }
            //printXmlPattrenToken("/classVarDec");
        }
        //('constructor' | 'function' | 'method') ('void' | type) subroutineName '(' parameterList ')' subroutineBody
        public CompileSubroutineDec():void
        { 
            //printXmlPattrenToken("subroutineDec");
            printXmlPattrenKeyword(returnKeywordToken()); //('constructor' | 'function' | 'method')
            mutable funcType = returnKeywordToken();
            advance();        
            CompileType(); //('void' | type)
            printXmlPattrenIdentifier(returnIdentifierToken());//subroutineName
            mutable funcName = returnIdentifierToken();
            advance();
            printXmlPattreSymbol(returnSymbolToken()); //'('
            advance();
            mutable argsCount = CompileParameterList(funcType);//parameterList
            printXmlPattreSymbol(returnSymbolToken()); //')'
            advance();
            
            mutable localsCounter = CompileSuroutineBodyVarDecs();//subroutineBody Locals 
            CompileSuroutineBodyStatements(); //subroutines body statements
            //printXmlPattrenToken("/subroutineDec");
            
            match(funcType) {
                |"function" => {toVMFile.writeFunction(symbolTable.ClassName + "." + funcName, localsCounter)}
                |"method" => {toVMFile.writeFunction(symbolTable.ClassName + "." + funcName, localsCounter + 1)}
                |"constructor" => {toVMFile.writeFunction(symbolTable.ClassName + "." + funcName, localsCounter)}
            }
        }
        // '{' varDec*
        public CompileSuroutineBodyVarDecs():int
        {
            mutable localsCounter = 0;
            
            //printXmlPattrenToken("subroutineBody");   
            printXmlPattreSymbol(returnSymbolToken()); //'{'
            advance();
            
            while(returnKeywordToken().Equals("var"))
            {
                localsCounter++;
                CompileVarDec();  //varDec
            }  
            
            localsCounter;
        }  
         // stetmenss '}'
        public CompileSuroutineBodyStatements():void
        {
            CompileStatements(); //statements
            
            printXmlPattreSymbol(returnSymbolToken()); //'}'
            symbolTable.exitFunctionDec();
            
            advance();            
            //printXmlPattrenToken("/subroutineBody");
        }  
        //( (type varName) (',' type varName)*)? 
        public CompileParameterList(funcType:string):int
        {
            mutable paramCount = 0;
            
            match(funcType) {
                |"method" => {symbolTable.addArgunment("this",symbolTable.ClassName); paramCount++;}
            }
            
            //printXmlPattrenToken("parameterList");       
            when(returnSymbolToken() != ")" )
            {
                paramCount++;
                mutable type = CompileType(); //type
                printXmlPattrenIdentifier(returnIdentifierToken());
                mutable name = returnIdentifierToken();
                symbolTable.addArgunment(name,type);
                advance();
                while(returnSymbolToken().Equals(",")) //(',' type varName)*
                {
                    paramCount++;
                    printXmlPattreSymbol(returnSymbolToken());
                    advance();
                    type = CompileType(); //type
                    printXmlPattrenIdentifier(returnIdentifierToken()); //varName
                    name = returnIdentifierToken();
                    symbolTable.addArgunment(name,type);
                    advance();
                }
            }      
            //printXmlPattrenToken("/parameterList");
            
            paramCount;
        }
        //'var' type varName (',' varName)* ';'
        public CompileVarDec():void
        {
            //printXmlPattrenToken("varDec");  
            printXmlPattrenKeyword(returnKeywordToken());//'var'
            advance();
            
            mutable type = CompileType();//type
            
            printXmlPattrenIdentifier(returnIdentifierToken());//varName
            mutable name = returnIdentifierToken();
            symbolTable.addVariable(name,type);
            advance();
            
            while(returnSymbolToken().Equals(",")) //(',' varName)*
            {
                printXmlPattreSymbol(returnSymbolToken()); //','
                advance();
                
                printXmlPattrenIdentifier(returnIdentifierToken()); //varName
                name = returnIdentifierToken();
                symbolTable.addVariable(name,type);
                advance();
            }
            printXmlPattreSymbol(returnSymbolToken());//';'
            advance();    
            //printXmlPattrenToken("/varDec");
        }
        //(letStatement | ifStatement | whileStatement | doStatement | returnStatement)*
        public CompileStatements():void
        {
            //printXmlPattrenToken("statements");   
            while(returnTypeToken().Equals("keyword")) 
            {
                match(returnKeywordToken())
                {
                    |"let" => CompileLet();
                    |"if" => CompileIf();
                    |"while" => CompileWhile();
                    |"do" => CompileDo();
                    |"return" => CompileReturn();
                    |_=>()
                }
            }  
            //printXmlPattrenToken("/statements");
        }
        //'do' subroutineCall ';'
        public CompileDo():void
        {
            //printXmlPattrenToken("doStatement");      
            printXmlPattrenKeyword(returnKeywordToken()); //'do'
            advance();
            
            CompileSubroutineCall(); //subroutineCall
            
            printXmlPattreSymbol(returnSymbolToken()); //;
            advance();   
            //printXmlPattrenToken("/doStatement");
        }
        //'let' varName ('[' expression ']')? '=' expression ';'
        public CompileLet():void
        {
            //printXmlPattrenToken("letStatement");  
            printXmlPattrenKeyword(returnKeywordToken());//let
            advance();
            
            printXmlPattrenIdentifier(returnIdentifierToken()); //varName
            mutable name = returnIdentifierToken();
            advance();
            
            when(returnSymbolToken().Equals("[")) //('[' expression ']')?
            {
                printXmlPattreSymbol(returnSymbolToken());//[
                advance();
                
                CompileExpression();
                
                printXmlPattreSymbol(returnSymbolToken());//]
                advance();
            }
            
            printXmlPattreSymbol("eq");//'='
            advance();
            
            CompileExpression();//expression
            
            printXmlPattreSymbol(returnSymbolToken());//';'
            advance();       
            //printXmlPattrenToken("/letStatement");
        }
        //'while' '(' expression ')' '{' statements '}'  
        public CompileWhile():void
        {
            //printXmlPattrenToken("whileStatement");      
            printXmlPattrenKeyword(returnKeywordToken()); //'while'
            advance();
            printXmlPattreSymbol(returnSymbolToken()); //'('
            advance();
            CompileExpression();//expression
            printXmlPattreSymbol(returnSymbolToken()); //')'
            advance();
            printXmlPattreSymbol(returnSymbolToken()); //'{'
            advance();
            CompileStatements();//statements
            printXmlPattreSymbol(returnSymbolToken()); //'}'
            advance();     
            //printXmlPattrenToken("/whileStatement"); 
        }
        //'return' expression? ';' 
        public CompileReturn():void
        {
            //printXmlPattrenToken("returnStatement");    
            printXmlPattrenKeyword(returnKeywordToken()); //'return'
            advance();
            when(returnSymbolToken() != ";")
            {
                CompileExpression();//expression
            }
            printXmlPattreSymbol(returnSymbolToken()); //';'
            advance();
            //printXmlPattrenToken("/returnStatement");  
        }
        // 'if' ( experssion ) '{' stestmens '}' (else '{' stetmens '}')?
        public CompileIf():void
        {
            //printXmlPattrenToken("ifStatement");  
            printXmlPattrenKeyword(returnKeywordToken()); //if
            advance();
            
            printXmlPattreSymbol(returnSymbolToken()); //'('
            advance();
            
            CompileExpression();
            
            printXmlPattreSymbol(returnSymbolToken()); // ')'
            advance();
            
            printXmlPattreSymbol(returnSymbolToken()); //'{'
            advance();
            
            CompileStatements();
            
            printXmlPattreSymbol(returnSymbolToken()); //'}'
            advance();
            
            when(returnKeywordToken().Equals("else"))
            {
                printXmlPattrenKeyword(returnKeywordToken()); // '{'
                advance();
                
                CompileStatements(); //stetmens
                
                printXmlPattreSymbol(returnSymbolToken()); //'}'
                advance();
            }
            //printXmlPattrenToken("/ifStatement");
        }
        //term (op term)* 
        public CompileExpression():void
        {
            //printXmlPattrenToken("expression");
            
            CompileTerm();//term
            
            when(isOperandToken())
            {
                match(returnKeywordToken())
                {
                    |"+" => printXmlPattreSymbol("add");
                    |"-" => printXmlPattreSymbol("sub");
                    |"*" => printXmlPattreSymbol("call Math.multiply 2");
                    |"/" => printXmlPattreSymbol("call Math.divide 2");
                    |"=" => printXmlPattreSymbol("eq");
                    |"|" => printXmlPattreSymbol("or");
                    |"&" => printXmlPattreSymbol("and");
                    |"&amp;" => printXmlPattreSymbol("amp");
                    |"&lt;" => printXmlPattreSymbol("lt");
                    |"&gt;" => printXmlPattreSymbol("gt");
                    |_=>()
                }
                advance();
            }
            when(!returnSymbolToken().Equals(")") && !returnSymbolToken().Equals(";") && !returnSymbolToken().Equals("]")  && !returnSymbolToken().Equals(","))
            {
                CompileTerm(); //term
            }    
            //printXmlPattrenToken("/expression");
        }
        //integerConstant | stringConstant | keywordConstant | varName | varName '[' expression ']' |identifier > subroutineCall | '(' expression ')' | unaryOp term
        public CompileTerm():void
        {
            //printXmlPattrenToken("term");  
            match(returnTypeToken())
            {
                |"integerConstant" =>
                {
                    printXmlPattrenIntegerConstant(returnIntegerConstantValue()); //number for example 254
                    toVMFile.writePush("constant",returnIntegerConstantValue());
                    advance();
                }
                |"stringConstant"=>
                {
                    printXmlPattreStringConstant(returnStringConstantValue()); //string for exemple "hello"
                    //there's a class that deals with that
                    pushStringVM(returnStringConstantValue());
                    advance();
                }
                |"keyword" =>
                {
                    printXmlPattrenKeyword(returnKeywordToken()); //keyword for example 'false'
                    advance();
                }
                |"identifier" =>
                {
                    printXmlPattrenIdentifier(returnIdentifierToken()); //identifier for example 'x'
                    //toVMFile.writePush(symbolTable.getKind(returnIdentifierToken()), symbolTable.getCounter(returnIdentifierToken()));
                    advance();

                    match(returnSymbolToken())
                    {
                        |"[" =>
                        {
                            printXmlPattreSymbol(returnSymbolToken()); //'['
                            advance();
                            
                            CompileExpression(); //expression
                            
                            printXmlPattreSymbol(returnSymbolToken()); //']'
                            advance();
                        }
                        |"("|"." =>
                        {
                            printXmlPattreSymbol(returnSymbolToken()); //'.' OR '('
                            advance();
                            
                            CompileSubroutineCall(); //subRoutinsCall
                        }
                        |_=>()
                    }
                }
                |"symbol" =>
                {
                    match(returnSymbolToken())
                    {
                        |"(" =>
                        {
                            printXmlPattreSymbol(returnSymbolToken()); //'('
                            advance();
                            CompileExpression(); //expression 
                            printXmlPattreSymbol(returnSymbolToken()); //')'
                            advance();
                        }
                        |"-"|"~" =>
                        {
                            printXmlPattreSymbol(returnSymbolToken()); //'~' OR '-'
                            advance();
                            CompileTerm(); //term
                        }
                        |_ =>()
                    }
                }
            }
            //printXmlPattrenToken("/term");
        } 
        //subroutineName '(' expressionList ')' | ( className | varName) '.' subroutineName '(' expressionList ')' 
        public CompileSubroutineCall():void
        {
            mutable funcName = "";
            mutable argsCounter = 0;
            
            printXmlPattrenIdentifier(returnIdentifierToken());//subroutineName || ( className | varName)
            funcName += returnIdentifierToken();
            advance();
            
            when(returnSymbolToken().Equals("("))
            {
                printXmlPattreSymbol(returnSymbolToken());//'('
                advance();
                
                argsCounter = CompileExpressionList();//expressionList
                
                printXmlPattreSymbol(returnSymbolToken());//')'
                advance();           
            }
            when(returnSymbolToken().Equals("."))
            {
                printXmlPattreSymbol(returnSymbolToken());//'.'
                funcName += returnSymbolToken();
                advance();
                
                printXmlPattrenIdentifier(returnIdentifierToken());//subroutineName
                funcName += returnIdentifierToken();
                advance();
                
                printXmlPattreSymbol(returnSymbolToken());//'('
                advance();
                
                argsCounter = CompileExpressionList();//expressionList
                
                printXmlPattreSymbol(returnSymbolToken());//')'
                advance();       
            }
        }
        //(expression (',' expression)* )? 
        public CompileExpressionList():int
        {
            mutable argsCounter = 0;
            
            //printXmlPattrenToken("expressionList");           
            when(returnSymbolToken() != ")")
            {
                argsCounter++;
                CompileExpression();//expression

                while(returnSymbolToken().Equals(","))
                {
                    printXmlPattreSymbol(returnSymbolToken());//','
                    advance();
                    
                    argsCounter++;
                    CompileExpression();//expression
                }
            }   
            //printXmlPattrenToken("/expressionList");   
            
            argsCounter;
        }
        
        public pushStringVM (str:string) : void {
            toVMFile.writePush("constant", str.Length);
            toVMFile.writeCall("String.new", 1);
            
            for(mutable i=0; i < str.Length; i++) {
               toVMFile.writePush("constant", str[i]);
               toVMFile.writeCall("String.appendChar", 2);
            }
        }
    }
}